/**
 * @file Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ code review
 * @description –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–Ω–∞ –¥–ª—è PR –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * @module PRReminderBot
 */

import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
 * @type {Telegraf}
 */
const bot = new Telegraf(process.env.BOT_TOKEN);

/**
 * ID —Ü–µ–ª–µ–≤–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @type {number|string}
 */
const TARGET_CHAT_ID = process.env.TARGET_CHAT_ID;

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
 * @namespace
 * @property {Object} windows - –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
 * @property {string|null} windows.morning - –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ (—Ñ–æ—Ä–º–∞—Ç HH:MM-HH:MM)
 * @property {string|null} windows.evening - –í–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ (—Ñ–æ—Ä–º–∞—Ç HH:MM-HH:MM)
 * @property {number|string} chatId - ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
 * @property {Set} reminders - –ö–æ–ª–ª–µ–∫—Ü–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
 */
const state = {
  windows: {
    morning: null,
    evening: null
  },
  chatId: TARGET_CHAT_ID,
  reminders: new Set()
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {string} timeStr - –°—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM
 * @returns {boolean} true –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
 */
const isValidTimeWindow = (timeStr) => 
  /^([01]?[0-9]|2[0-3]):[0-5][0-9]-([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(timeStr);

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * @function clearAllReminders
 */
function clearAllReminders() {
  state.reminders.forEach(timeoutId => clearTimeout(timeoutId));
  state.reminders.clear();
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @function setReminder
 * @param {string} timeStr - –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM-HH:MM
 * @param {string} windowName - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ ('—É—Ç—Ä–µ–Ω–Ω–µ–µ'/'–≤–µ—á–µ—Ä–Ω–µ–µ')
 */
function setReminder(timeStr, windowName) {
  const [startTime] = timeStr.split('-');
  const [hours, minutes] = startTime.split(':').map(Number);
  
  const now = new Date();
  const reminderTime = new Date();
  reminderTime.setHours(hours, minutes - 10, 0, 0);
  
  if (reminderTime < now) {
    reminderTime.setDate(reminderTime.getDate() + 1);
  }
  
  const timeoutMs = reminderTime - now;
  
  const timeoutId = setTimeout(() => {
    sendToChat(`‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ${windowName} –æ–∫–Ω–æ PR (${timeStr})! @all`);
    setReminder(timeStr, windowName);
  }, timeoutMs);
  
  state.reminders.add(timeoutId);
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_windows
 * @command set_windows
 * @param {string} args - –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–Ω–∞)
 * @example /set_windows 10:00-11:00
 * @example /set_windows 10:00-11:00 18:00-19:00
 */
bot.command('set_windows', (ctx) => {
  const args = ctx.message.text.split(' ').slice(1);
  
  clearAllReminders();
  
  if (args.length === 0 || args.length > 2) {
    return ctx.reply(
      '‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –æ–∫–Ω–∞. –ü—Ä–∏–º–µ—Ä—ã:\n' +
      '/set_windows 10:00-11:00\n' +
      '/set_windows 10:00-11:00 18:00-19:00'
    );
  }

  if (!args.every(isValidTimeWindow)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: HH:MM-HH:MM');
  }

  state.windows = {
    morning: args[0],
    evening: args.length > 1 ? args[1] : null
  };
  state.chatId = ctx.chat.id;

  setReminder(state.windows.morning, '—É—Ç—Ä–µ–Ω–Ω–µ–µ');
  if (state.windows.evening) {
    setReminder(state.windows.evening, '–≤–µ—á–µ—Ä–Ω–µ–µ');
  }

  let response = 'üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–∫–Ω–∞ –¥–ª—è PR:\n';
  response += `‚òÄÔ∏è –£—Ç—Ä–æ: ${state.windows.morning}\n`;
  if (state.windows.evening) {
    response += `üåô –í–µ—á–µ—Ä: ${state.windows.evening}\n`;
  }
  response += '\n–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!';

  ctx.reply(response);
  
  if (ctx.chat.id !== TARGET_CHAT_ID) {
    sendToChat(response + '\n@all');
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /show_windows
 * @command show_windows
 * @description –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
 */
bot.command('show_windows', (ctx) => {
  if (!state.windows.morning && !state.windows.evening) {
    return ctx.reply('‚ÑπÔ∏è –û–∫–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_windows');
  }

  let response = 'üìÖ –¢–µ–∫—É—â–∏–µ –æ–∫–Ω–∞:\n';
  if (state.windows.morning) {
    response += `‚òÄÔ∏è –£—Ç—Ä–æ: ${state.windows.morning}\n`;
  }
  if (state.windows.evening) {
    response += `üåô –í–µ—á–µ—Ä: ${state.windows.evening}\n`;
  }
  
  ctx.reply(response);
});

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç
 * @function sendToChat
 * @param {string} message - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function sendToChat(message) {
  if (!state.chatId) {
    console.error('Chat ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
    return;
  }
  
  bot.telegram.sendMessage(state.chatId, message)
    .catch(err => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err));
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => {
  clearAllReminders();
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  clearAllReminders();
  bot.stop('SIGTERM');
});

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
 * @function launch
 * @listens bot.launch
 */
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('üö® –û—à–∏–±–∫–∞:', err));