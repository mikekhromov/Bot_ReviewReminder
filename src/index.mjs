/**
 * @file Telegram –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ code review
 * @description –ü–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–Ω–∞ –¥–ª—è PR –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
 * @module PRReminderBot
 */

import { Telegraf } from 'telegraf';
import dotenv from 'dotenv';

dotenv.config();

/**
 * –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegram
 * @type {Telegraf}
 */
const bot = new Telegraf(process.env.BOT_TOKEN);

/**
 * –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±—â–∏–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞)
 * @type {number|string|undefined}
 */
const DEFAULT_TARGET_CHAT_ID = process.env.TARGET_CHAT_ID || undefined;

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –æ–∫–Ω–∞ HH:MM-HH:MM
 * @param {string} timeStr
 * @returns {boolean}
 */
const isValidTimeWindow = (timeStr) =>
  /^([01]?\d|2[0-3]):[0-5]\d-([01]?\d|2[0-3]):[0-5]\d$/.test(timeStr);

/**
 * @typedef {Object} Windows
 * @property {string|null} morning - –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–∫–Ω–æ (HH:MM-HH:MM)
 * @property {string|null} evening - –í–µ—á–µ—Ä–Ω–µ–µ –æ–∫–Ω–æ (HH:MM-HH:MM)
 */

/**
 * @typedef {Object} ChatState
 * @property {Windows} windows
 * @property {Map<'morning'|'evening', NodeJS.Timeout>} reminders
 */

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
 * @type {Map<number|string, ChatState>}
 */
const chatStates = new Map();

/**
 * –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
 * @param {number|string} chatId
 * @returns {ChatState}
 */
function getChatState(chatId) {
  if (!chatStates.has(chatId)) {
    chatStates.set(chatId, {
      windows: { morning: null, evening: null },
      reminders: new Map(),
    });
  }
  return chatStates.get(chatId);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
 * @param {string} message
 * @param {number|string} chatId
 * @returns {Promise<void>}
 */
async function sendToChat(message, chatId) {
  try {
    await bot.telegram.sendMessage(chatId, message);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', err);
  }
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–∞—Ç–∞
 * @param {number|string} chatId
 */
function clearChatReminders(chatId) {
  const st = getChatState(chatId);
  for (const timeout of st.reminders.values()) clearTimeout(timeout);
  st.reminders.clear();
}

/**
 * –ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—Ä–µ–º—è ¬´–∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞¬ª –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
 * @param {string} startHHMM - "HH:MM"
 * @returns {Date} –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞)
 */
function nextReminderDate(startHHMM) {
  const [h, m] = startHHMM.split(':').map(Number);
  const now = new Date();

  const reminder = new Date();
  reminder.setSeconds(0, 0);
  reminder.setHours(h, m, 0, 0);
  // –∑–∞ 10 –º–∏–Ω—É—Ç
  reminder.setMinutes(reminder.getMinutes() - 10);

  if (reminder <= now) {
    // –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    reminder.setDate(reminder.getDate() + 1);
  }
  return reminder;
}

/**
 * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞ —á–∞—Ç–∞
 * @param {number|string} chatId
 * @param {'morning'|'evening'} windowKey
 * @param {string} timeWindow - "HH:MM-HH:MM"
 */
function scheduleReminder(chatId, windowKey, timeWindow) {
  const st = getChatState(chatId);
  const [start] = timeWindow.split('-');
  const runAt = nextReminderDate(start);
  const timeoutMs = runAt.getTime() - Date.now();

  // –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞ ‚Äî –æ—á–∏—Å—Ç–∏–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
  const existing = st.reminders.get(windowKey);
  if (existing) clearTimeout(existing);

  const timeoutId = setTimeout(async () => {
    // –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä
    const current = st.reminders.get(windowKey);
    if (current) st.reminders.delete(windowKey);

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—å –ª–∏ –æ–∫–Ω–∞ —Å —Ç–µ—Ö –ø–æ—Ä
    const fresh = getChatState(chatId).windows[windowKey];
    if (fresh !== timeWindow) {
      // –æ–∫–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –Ω–µ —à–ª—ë–º —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      // –Ω–æ –µ—Å–ª–∏ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–¥–∞–Ω–æ ‚Äî –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —É–∂–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
      if (fresh) scheduleReminder(chatId, windowKey, fresh);
      return;
    }

    await sendToChat(`‚è∞ –ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ${windowKey === 'morning' ? '—É—Ç—Ä–µ–Ω–Ω–µ–µ' : '–≤–µ—á–µ—Ä–Ω–µ–µ'} –æ–∫–Ω–æ PR (${timeWindow})! @all`, chatId);

    // –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    scheduleReminder(chatId, windowKey, timeWindow);
  }, timeoutMs);

  st.reminders.set(windowKey, timeoutId);
}

/**
 * –ö–æ–º–∞–Ω–¥–∞: /set_windows 10:00-11:00 [18:00-19:00]
 */
bot.command('set_windows', async (ctx) => {
  const chatId = ctx.chat.id;
  const args = ctx.message.text.split(' ').slice(1);

  if (args.length === 0 || args.length > 2) {
    return ctx.reply(
      '‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –¥–≤–∞ –æ–∫–Ω–∞. –ü—Ä–∏–º–µ—Ä—ã:\n' +
      '/set_windows 10:00-11:00\n' +
      '/set_windows 10:00-11:00 18:00-19:00'
    );
  }
  if (!args.every(isValidTimeWindow)) {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: HH:MM-HH:MM');
  }

  const st = getChatState(chatId);

  // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–∞
  st.windows.morning = args[0];
  st.windows.evening = args[1] ?? null;

  // –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã —Å—Ç—Ä–æ–≥–æ –≤ —Ä–∞–º–∫–∞—Ö —ç—Ç–æ–≥–æ —á–∞—Ç–∞
  clearChatReminders(chatId);
  scheduleReminder(chatId, 'morning', st.windows.morning);
  if (st.windows.evening) scheduleReminder(chatId, 'evening', st.windows.evening);

  let response = 'üïí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–∫–Ω–∞ –¥–ª—è PR:\n';
  response += `‚òÄÔ∏è –£—Ç—Ä–æ: ${st.windows.morning}\n`;
  if (st.windows.evening) response += `üåô –í–µ—á–µ—Ä: ${st.windows.evening}\n`;
  response += '\n–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞!';

  await ctx.reply(response);

  // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ –æ–±—â–∏–π –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É ‚Äî —É–∫–∞–∂–∏ TARGET_CHAT_ID –≤ .env
  if (DEFAULT_TARGET_CHAT_ID && String(DEFAULT_TARGET_CHAT_ID) !== String(chatId)) {
    await sendToChat(response + '\n@all', DEFAULT_TARGET_CHAT_ID);
  }
});

/**
 * –ö–æ–º–∞–Ω–¥–∞: /show_windows
 */
bot.command('show_windows', (ctx) => {
  const chatId = ctx.chat.id;
  const st = getChatState(chatId);

  if (!st.windows.morning && !st.windows.evening) {
    return ctx.reply('‚ÑπÔ∏è –û–∫–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_windows');
  }

  let response = 'üìÖ –¢–µ–∫—É—â–∏–µ –æ–∫–Ω–∞:\n';
  if (st.windows.morning) response += `‚òÄÔ∏è –£—Ç—Ä–æ: ${st.windows.morning}\n`;
  if (st.windows.evening) response += `üåô –í–µ—á–µ—Ä: ${st.windows.evening}\n`;

  ctx.reply(response);
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ‚Äî —á–∏—Å—Ç–∏–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
function clearAllRemindersAllChats() {
  for (const [chatId] of chatStates) clearChatReminders(chatId);
}

process.once('SIGINT', () => {
  clearAllRemindersAllChats();
  bot.stop('SIGINT');
});

process.once('SIGTERM', () => {
  clearAllRemindersAllChats();
  bot.stop('SIGTERM');
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (err) => {
  console.error('unhandledRejection:', err);
});
process.on('uncaughtException', (err) => {
  console.error('uncaughtException:', err);
});

/**
 * –ó–∞–ø—É—Å–∫
 */
bot.launch()
  .then(() => console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω'))
  .catch(err => console.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));
